# PyProject Configuration for ManipulatorAI
# Modern Python project configuration following PEP 518

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "manipulator-ai"
version = "1.0.0"
description = "AI-powered customer engagement and lead qualification service for social media interactions"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "ManipulatorAI Team", email = "team@manipulatorai.com"},
]
keywords = ["ai", "customer-engagement", "social-media", "lead-qualification", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.35.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.10.0",
    "structlog>=25.4.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.30.0",
    "motor>=3.7.0",
    "redis>=5.2.0",
    "celery[redis]>=5.5.0",
    "openai>=1.93.0",
    "azure-identity>=1.23.0",
    "httpx>=0.28.0",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "python-dotenv>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "black>=25.1.0",
    "ruff>=0.12.2",
    "mypy>=1.16.0",
    "isort>=6.0.0",
    "bandit>=1.8.6",
    "pre-commit>=4.2.0",
    "httpie>=3.2.3",
    "locust>=2.32.0",
]

docs = [
    "sphinx>=8.2.0",
    "sphinx-rtd-theme>=3.0.0",
    "sphinx-autodoc-typehints>=3.2.0",
]

profiling = [
    "py-spy>=0.4.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/manipulatorai/manipulatorai"
Documentation = "https://manipulatorai.readthedocs.io"
Repository = "https://github.com/manipulatorai/manipulatorai.git"
"Bug Tracker" = "https://github.com/manipulatorai/manipulatorai/issues"

[project.scripts]
manipulatorai = "src.main:main"

# Tool configurations
[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["migrations/*"]

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q", # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG001", "S101"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "motor.*",
    "structlog.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101", "B601"]  # Skip assert and shell warnings for development
